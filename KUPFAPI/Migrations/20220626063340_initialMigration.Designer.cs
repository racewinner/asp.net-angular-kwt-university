// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(KUPFDbContext))]
    [Migration("20220626063340_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("API.Models.AccountHead", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("HeadId")
                        .HasColumnType("int")
                        .HasColumnName("HeadID");

                    b.Property<string>("ArabicHeadName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("BalanceAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<int>("FamilyId")
                        .HasColumnType("int")
                        .HasColumnName("Family_ID");

                    b.Property<int>("HeadCode")
                        .HasColumnType("int");

                    b.Property<string>("HeadName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("TenentId", "LocationId", "HeadId");

                    b.ToTable("AccountHead", "Accounts");
                });

            modelBuilder.Entity("API.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountTypeID");

                    b.Property<string>("AccountTypeName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'Name')");

                    b.Property<string>("ArabicAccountTypeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes", "Accounts");
                });

            modelBuilder.Entity("API.Models.ChequeBook", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("ChequeBookId")
                        .HasColumnType("int")
                        .HasColumnName("ChequeBookID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("date");

                    b.Property<int?>("FromChequeNo")
                        .HasColumnType("int");

                    b.Property<int?>("ToChequeNo")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCheques")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UsedCheques")
                        .HasColumnType("int");

                    b.HasKey("TenentId", "LocationId", "ChequeBookId");

                    b.ToTable("ChequeBooks", "Accounts");
                });

            modelBuilder.Entity("API.Models.Coa", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AccountType_ID");

                    b.Property<string>("ArabicAccountName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("int")
                        .HasColumnName("Family_ID");

                    b.Property<int>("HeadId")
                        .HasColumnType("int")
                        .HasColumnName("Head_ID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherAccountName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SubHeadId")
                        .HasColumnType("int")
                        .HasColumnName("SubHead_ID");

                    b.Property<int?>("SubSubHeadId")
                        .HasColumnType("int")
                        .HasColumnName("SubSubHead_ID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "AccountId");

                    b.ToTable("COA", "Accounts");
                });

            modelBuilder.Entity("API.Models.CostCenter", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<int>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenterID");

                    b.Property<string>("ArabicCostCenterName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("CostCenterName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CostCenterNumber")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OtherCostCenterName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "CostCenterId");

                    b.ToTable("CostCenters", "Accounts");
                });

            modelBuilder.Entity("API.Models.CrupMst", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("TENANT_ID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<long>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("ActivityNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime>("CreatedDt")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DT");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("MENU_ID");

                    b.Property<int?>("MySerial")
                        .HasColumnType("int");

                    b.Property<string>("Physicallocid")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PHYSICALLOCID");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UPDATED_BY");

                    b.Property<DateTime?>("UpdatedDt")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDATED_DT");

                    b.HasKey("TenantId", "LocationId", "CrupId")
                        .HasName("PK_ERP_CREATEUPDATE_MST");

                    b.ToTable("CRUP_MST");
                });

            modelBuilder.Entity("API.Models.Crupaudit", b =>
                {
                    b.Property<long>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TENANT_ID")
                        .HasDefaultValueSql("((18))");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<int>("MySerial")
                        .HasColumnType("int");

                    b.Property<int>("AuditNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuditType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("TenantId", "LocationId", "CrupId", "MySerial", "AuditNo")
                        .HasName("PK_CRUPAuditAudit");

                    b.ToTable("CRUPAudit");
                });

            modelBuilder.Entity("API.Models.DeletedVoucher", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenter_ID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FperiodId")
                        .HasColumnType("int")
                        .HasColumnName("FPeriod_ID");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<string>("Narrations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("date");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherType_ID");

                    b.HasKey("TenentId", "LocationId", "VoucherId");

                    b.ToTable("DeletedVoucher", "Accounts");
                });

            modelBuilder.Entity("API.Models.DetailedEmployee", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("employeeID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ActiveDirectoryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ActiveDirectoryID");

                    b.Property<decimal?>("AgreedSubAmount")
                        .HasColumnType("numeric(18,3)");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CityCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city_code")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ContractType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CounCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("coun_code")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Department")
                        .HasColumnType("int")
                        .HasComment("Coming from RefTable RefSubType='Department'");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Department_Name");

                    b.Property<string>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DeviceID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("EmpBirthday")
                        .HasColumnType("datetime")
                        .HasColumnName("emp_birthday");

                    b.Property<string>("EmpCidNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_cid_num")
                        .HasDefaultValueSql("((1))");

                    b.Property<short?>("EmpGender")
                        .HasColumnType("smallint")
                        .HasColumnName("emp_gender");

                    b.Property<string>("EmpMaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("emp_marital_status");

                    b.Property<string>("EmpOtherId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_other_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpPaciNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_paci_num")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("EmpStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpStreet1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_street1")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpStreet2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_street2")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpWorkEmail")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_work_email")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpWorkTelephone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_work_telephone")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmployeeLoginId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("EmployeeLoginID");

                    b.Property<string>("EmployeePassword")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("EmployeeType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(N'1')")
                        .HasComment("1= Employee, 2= Non Employee");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_date");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HajjAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("JobTitleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_title_code")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Coming from RefTable RefSubType='Role'");

                    b.Property<string>("JobTitleName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("job_title_Name");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("joined_date");

                    b.Property<string>("LoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MainHrroleId")
                        .HasColumnType("int")
                        .HasColumnName("MainHRRoleID")
                        .HasComment("Coming from RefTable RefSubType='Role'");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("NationCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nation_code")
                        .HasDefaultValueSql("((126))")
                        .HasComment("Nationality Code from tblcountry");

                    b.Property<string>("NationName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("nation_Name");

                    b.Property<string>("Next2KinMobNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Next2KinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OtherAct1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("PersLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pfid")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PFID");

                    b.Property<DateTime?>("ReSubscribed")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReSubscripedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ReSubscriped_date");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("salary");

                    b.Property<DateTime?>("SubscribedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SubscriptionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("subscription_date");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TerminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("termination_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("userID");

                    b.HasKey("TenentId", "LocationId", "EmployeeId")
                        .HasName("PK_tbl_Employee");

                    b.HasIndex(new[] { "TenentId", "Pfid" }, "IX_DetailedEmployee");

                    b.ToTable("DetailedEmployee");
                });

            modelBuilder.Entity("API.Models.DetailedEmployeeImport", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ActiveDirectoryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ActiveDirectoryID");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CityCode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city_code")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("CounCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("coun_code")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Department")
                        .HasColumnType("int")
                        .HasComment("Coming from RefTable RefSubType='Department'");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Department_Name");

                    b.Property<string>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DeviceID")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("EmpBirthday")
                        .HasColumnType("datetime")
                        .HasColumnName("emp_birthday");

                    b.Property<string>("EmpCidNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_cid_num")
                        .HasDefaultValueSql("((1))");

                    b.Property<short?>("EmpGender")
                        .HasColumnType("smallint")
                        .HasColumnName("emp_gender");

                    b.Property<string>("EmpMaritalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("emp_marital_status");

                    b.Property<int?>("EmpOtherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_other_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpPaciNum")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_paci_num")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("EmpStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpStreet1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_street1")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpStreet2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("emp_street2")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpWorkEmail")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_work_email")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmpWorkTelephone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_work_telephone")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("EmployeeType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValueSql("(N'1')")
                        .HasComment("1= Employee, 2= Non Employee");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("End_date");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HajjAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Importdate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("IMPORTDATE");

                    b.Property<int?>("JobTitleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_title_code")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Coming from RefTable RefSubType='Role'");

                    b.Property<string>("JobTitleName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("job_title_name");

                    b.Property<DateTime?>("JoinedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("joined_date");

                    b.Property<string>("LoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MainHrroleId")
                        .HasColumnType("int")
                        .HasColumnName("MainHRRoleID")
                        .HasComment("Coming from RefTable RefSubType='Role'");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("NationCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nation_code")
                        .HasDefaultValueSql("((126))")
                        .HasComment("Nationality Code from tblcountry");

                    b.Property<string>("Next2KinMobNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Next2KinName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OtherAct1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("PersLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pfid")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PFID");

                    b.Property<DateTime?>("ReSubscripedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ReSubscriped_date");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("numeric(18,3)")
                        .HasColumnName("salary");

                    b.Property<string>("StudenLoginId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Studen_LoginID");

                    b.Property<DateTime?>("SubscriptionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("subscription_date");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TerminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("termination_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("userID");

                    b.HasKey("TenentId", "LocationId", "EmployeeId");

                    b.ToTable("DetailedEmployee_Import");
                });

            modelBuilder.Entity("API.Models.DrCrTemplate", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TemplateID")
                        .UseIdentityColumn();

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<string>("ArabicTemplateName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDrNote")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TemplateId")
                        .HasName("PK__DrCrTemp__F87ADD07FC51001D");

                    b.ToTable("DrCrTemplate", "Accounts");
                });

            modelBuilder.Entity("API.Models.FaaccountGroup", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ActGroupId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1=Yes / 0=No");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Cuserid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSERID");

                    b.Property<string>("DefaultCc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DefaultCC");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))")
                        .HasComment("");

                    b.Property<int>("EffectGrossProfit")
                        .HasColumnType("int")
                        .HasComment("1=Yes/ 0=No");

                    b.Property<string>("Glsl")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("GLSL")
                        .HasComment("GL/SL");

                    b.Property<string>("GroupDesc1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GroupDesc2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GroupDesc3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("GroupNatureType")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasComment("1=Income, 2= Expenditure");

                    b.Property<int>("GroupSubType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=SubType based upon above choosen Account Type this sub type will be displayed");

                    b.Property<int>("GroupType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=Type (Assets, Liabilities, Equity, Revenue, Expenses)");

                    b.Property<string>("GroupUnder")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Main Group is from the same Table");

                    b.Property<int>("InternalGroupId")
                        .HasColumnType("int")
                        .HasComment("coming from REFID from RefType=ACT RefSubtype=Group");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "ActGroupId")
                        .HasName("PK_AccountGroup");

                    b.ToTable("FAAccountGroup");
                });

            modelBuilder.Entity("API.Models.FaactIntegSetup", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Transid")
                        .HasColumnType("int")
                        .HasColumnName("transid")
                        .HasComment("tbltranssubtype.Transid for the Selected above System");

                    b.Property<string>("Mysysname")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("MYSYSNAME")
                        .HasComment("tblsystems.mysysname for the exist unique tbltranssubtype.mysysname record in tbltranssubtype");

                    b.Property<int>("Transsubid")
                        .HasColumnType("int")
                        .HasColumnName("transsubid")
                        .HasComment("tbltranssubtype.Transsubid for the Selected above System");

                    b.Property<string>("ActIntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("ActIntegrationID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1=CostOSales,2=Sales,3=Items Related Expenses");

                    b.Property<string>("AccountId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("AccountID")
                        .HasComment("From the FASLAccount.SLAccountID to be used here where the type of the account to be decided like expense etc");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<bool?>("Consolidation")
                        .HasColumnType("bit")
                        .HasComment("Cost Center yet no drop down available but for the future use");

                    b.Property<string>("ConsolidationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .HasDefaultValueSql("((0))")
                        .IsFixedLength(true)
                        .HasComment("Consolidation MO=Monthly / WK=Weekly / DA=Daily / YR=Yearly / PR=Once in the Period");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Consolidation 1=Yes / 0=No");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("DefaultCc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DefaultCC")
                        .HasComment("Cost Center yet no drop down available but for the future use");

                    b.Property<int>("FromCatSubId")
                        .HasColumnType("int")
                        .HasColumnName("FromCatSubID")
                        .HasComment("tblCategory having self Join");

                    b.Property<string>("FromItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("From the MYPRODID.TBLPRODUCT incase of one Item than From & To remain Same");

                    b.Property<string>("GroupId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("GroupID")
                        .HasComment("The  FAAcountGroup.ActGroupID to be used as default yet no action needed from this");

                    b.Property<string>("IntegrationDesc1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IntegrationDesc2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IntegrationDesc3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ToCatSubId")
                        .HasColumnType("int")
                        .HasColumnName("ToCatSubID")
                        .HasComment("tblCategory having self Join");

                    b.Property<string>("ToItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("From the MYPRODID.TBLPRODUCT incase of one Item than From & To remain Same");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "Transid", "Mysysname", "Transsubid", "ActIntegrationId", "AccountId");

                    b.ToTable("FAActIntegSetup");
                });

            modelBuilder.Entity("API.Models.FaactPredGroup", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ActPredGroupId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("User will enter and not allowed to change any predefined here it is fixed");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("((0))")
                        .HasComment("1=Yes / 0=No");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Cuserid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSERID");

                    b.Property<string>("DefaultCc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DefaultCC");

                    b.Property<string>("Description1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Glsl")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("GLSL")
                        .HasComment("GL/SL");

                    b.Property<string>("GroupNatureType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("GroupSubType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=SubType based upon above choosen Account Type this sub type will be displayed");

                    b.Property<int?>("GroupType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=Type (Assets, Liabilities, Equity, Revenue, Expenses)");

                    b.Property<string>("GroupUnder")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("InternalGroupId")
                        .HasColumnType("int")
                        .HasComment("coming from REFID from RefType=ACT RefSubtype=Group");

                    b.Property<string>("LeftRight")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength(true);

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "ActPredGroupId");

                    b.ToTable("FAActPredGroup");
                });

            modelBuilder.Entity("API.Models.FacashBankMaster", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("AcountId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountName2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountName3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ActGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ActType")
                        .HasColumnType("int");

                    b.Property<int?>("AnalysisType")
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequeMiti")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ChequeNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentBalance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DocId")
                        .HasColumnType("int");

                    b.Property<int?>("Fyid")
                        .HasColumnType("int")
                        .HasColumnName("FYid");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("PreDefinedAccount")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Rate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SortingOrder")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VoucherDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VoucherMiti")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("VoucherNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("TenentId", "LocationId", "AcountId");

                    b.ToTable("FACashBankMaster");
                });

            modelBuilder.Entity("API.Models.FachequeBook", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("ChequeId")
                        .HasColumnType("int")
                        .HasColumnName("ChequeID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<string>("ChequeName1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ChequeName2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ChequeName3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Compid")
                        .HasColumnType("int")
                        .HasColumnName("COMPID");

                    b.Property<int?>("ContactMyId")
                        .HasColumnType("int")
                        .HasColumnName("ContactMyID");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<DateTime?>("DateOutFromBank")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dated")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Switch1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SWITCH1");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "ChequeId");

                    b.ToTable("FAChequeBook");
                });

            modelBuilder.Entity("API.Models.FacostCenter", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("CostCenterId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CostCenterID")
                        .HasComment("User will enter and not allowed to change any predefined here it is fixed");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("CostCenterName1")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CostCenterName2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CostCenterName3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Cuserid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSERID");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID")
                        .HasComment("HRMSDepartment.DepartmentID where active=Y");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("GlcontrolAccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("GLControlAccountID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Status of this CC will be reported here in the GL to know actually how this CC");

                    b.Property<string>("GroupUnder")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Stock or Investment in the Hand will be reported in this Account here");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("ProjectID")
                        .HasComment("tblProject.ProjectID where active=Y");

                    b.Property<string>("SlexpenseAccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SLExpenseAccountID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("all the expenses of this CC will be reported here");

                    b.Property<string>("SlrevenueAccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SLRevenueAccountID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("all the Revenue of this CC will be reported here");

                    b.Property<string>("SlstockInHandAccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SLStockInHandAccountID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("all the expenses of this CC will be reported here");

                    b.HasKey("TenentId", "LocationId", "CostCenterId");

                    b.ToTable("FACostCenter");
                });

            modelBuilder.Entity("API.Models.Faglaccount", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("GlaccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("GLAccountID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ActGroupId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("FAAcountGroup.ActGroupID where GLSL=GL");

                    b.Property<string>("ActPredGroupId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("FAActPredGroup.ActPredGroupId ");

                    b.Property<int>("ActSubType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=SubType based upon above choosen Account Type this sub type will be displayed");

                    b.Property<int>("ActType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=Type (Assets, Liabilities, Equity, Revenue, Expenses)");

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACTIVE")
                        .HasDefaultValueSql("('Y')");

                    b.Property<int>("AnalysisType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=AnalysisType Purchase / Sales / Stock / Cost of the Stock");

                    b.Property<int>("Compid")
                        .HasColumnType("int")
                        .HasColumnName("COMPID")
                        .HasComment("if this has relation with tblcompanysetup than take if this has relation with tblcompanysetup.compid default=99999(Not Found in the table)");

                    b.Property<string>("ConsolidationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .HasDefaultValueSql("((0))")
                        .IsFixedLength(true)
                        .HasComment("Consolidation MO=Monthly / WK=Weekly / DA=Daily / YR=Yearly / PR=Once in the Period");

                    b.Property<int>("ContactMyId")
                        .HasColumnType("int")
                        .HasColumnName("ContactMyID")
                        .HasComment("if this has relation with tblcontact than take if this has relation with tblcontact.contactid default=99999(Not Found in the table)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("DefaultCc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DefaultCC");

                    b.Property<string>("GlaccountName1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GLAccountName1");

                    b.Property<string>("GlaccountName2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GLAccountName2");

                    b.Property<string>("GlaccountName3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("GLAccountName3");

                    b.Property<string>("Glsltype")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("GLSLType")
                        .HasComment("GL=General Ledger Always by default GL");

                    b.Property<bool?>("Header")
                        .HasColumnType("bit")
                        .HasComment("Header Yes than this account can be used than many below will be bypassed");

                    b.Property<int>("InternalGroupId")
                        .HasColumnType("int")
                        .HasComment("coming from REFID from RefType=ACT RefSubtype=Group");

                    b.Property<string>("MasterAccountId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MasterAccountID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Incase this falls into another Accounts Group than within GL or SL we will choose account");

                    b.Property<int>("Opamount")
                        .HasColumnType("int")
                        .HasColumnName("OPAmount");

                    b.Property<int>("OpdrCr")
                        .HasColumnType("int")
                        .HasColumnName("OPDrCr");

                    b.Property<long>("OpperiodCode")
                        .HasColumnType("bigint")
                        .HasColumnName("OPPERIOD_CODE")
                        .HasComment("from TblPeriod where SystemName=Finance/ACT");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Same as used in the tblcontact");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Switch1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SWITCH1");

                    b.Property<string>("Switch2")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWITCH2");

                    b.Property<string>("Switch3")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWITCH3");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "GlaccountId")
                        .HasName("PK_FAAccountLedger")
                        .IsClustered(false);

                    b.ToTable("FAGLAccount");
                });

            modelBuilder.Entity("API.Models.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .HasColumnType("int")
                        .HasColumnName("FamilyID");

                    b.Property<string>("ArabicName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<int?>("FamilyCode")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("OtherName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FamilyId");

                    b.ToTable("Families", "Accounts");
                });

            modelBuilder.Entity("API.Models.Faslaccount", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("GlaccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("GLAccountID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SlaccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SLAccountID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ActGroupId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("FAAcountGroup.ActGroupID where GLSL=SL");

                    b.Property<int>("ActSubType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=SubType based upon above choosen Account Type this sub type will be displayed");

                    b.Property<int>("ActType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=Type (Assets, Liabilities, Equity, Revenue, Expenses)");

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACTIVE")
                        .HasDefaultValueSql("('Y')");

                    b.Property<int>("AnalysisType")
                        .HasColumnType("int")
                        .HasComment("REFID From the RefTable REFTYPE=AccountTyp REFSUBTYPE=AnalysisType Purchase / Sales / Stock / Cost of the Stock");

                    b.Property<int>("Compid")
                        .HasColumnType("int")
                        .HasColumnName("COMPID")
                        .HasComment("if this has relation with tblcompanysetup than take if this has relation with tblcompanysetup.compid default=99999(Not Found in the table)");

                    b.Property<string>("ConsolidationType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .HasDefaultValueSql("((0))")
                        .IsFixedLength(true)
                        .HasComment("Consolidation MO=Monthly / WK=Weekly / DA=Daily / YR=Yearly / PR=Once in the Period");

                    b.Property<int>("ContactMyId")
                        .HasColumnType("int")
                        .HasColumnName("ContactMyID")
                        .HasComment("if this has relation with tblcontact than take if this has relation with tblcontact.contactid default=99999(Not Found in the table)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("DefaultCc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DefaultCC");

                    b.Property<string>("Glsltype")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("GLSLType")
                        .HasComment("GL=General Ledger Always by default SL");

                    b.Property<bool?>("Header")
                        .HasColumnType("bit")
                        .HasComment("Header Yes than this account can be used than many below will be bypassed");

                    b.Property<int>("InternalGroupId")
                        .HasColumnType("int")
                        .HasComment("coming from REFID from RefType=ACT RefSubtype=Group");

                    b.Property<string>("MasterAccountId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MasterAccountID")
                        .HasComment("Incase this falls into another Accounts Group than within SL we will choose account If Header=Yes than this cant be used\r\n");

                    b.Property<int>("Opamount")
                        .HasColumnType("int")
                        .HasColumnName("OPAmount");

                    b.Property<int>("OpdrCr")
                        .HasColumnType("int")
                        .HasColumnName("OPDrCr");

                    b.Property<long>("OpperiodCode")
                        .HasColumnType("bigint")
                        .HasColumnName("OPPERIOD_CODE")
                        .HasComment("from TblPeriod where SystemName=Finance/ACT");

                    b.Property<string>("PredAccountId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PredAccountID")
                        .HasComment("Comming from FAAPredGroup");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Same as used in the tblcontact");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SlaccountName1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SLAccountName1");

                    b.Property<string>("SlaccountName2")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SLAccountName2");

                    b.Property<string>("SlaccountName3")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("SLAccountName3");

                    b.Property<string>("Switch1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SWITCH1");

                    b.Property<string>("Switch2")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWITCH2");

                    b.Property<string>("Switch3")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("SWITCH3");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "GlaccountId", "SlaccountId")
                        .IsClustered(false);

                    b.ToTable("FASLAccount");
                });

            modelBuilder.Entity("API.Models.FinancialPeriod", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("FperiodId")
                        .HasColumnType("int")
                        .HasColumnName("FPeriodID");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<string>("DescripitonArabic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DescripitonEng")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("YearCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TenentId", "LocationId", "FperiodId");

                    b.ToTable("FinancialPeriod", "Accounts");
                });

            modelBuilder.Entity("API.Models.FormTitleDt", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<string>("FormTitleHdId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("FormID")
                        .HasComment("Make sure you are not using any special character here");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasComment("1= English 2=Arabic you can take from reftable refsubtype='Language'");

                    b.Property<string>("LabelId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("LabelID");

                    b.Property<string>("ArabicTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("English or Arabic Text");

                    b.Property<string>("Attiribute")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("incase color or any special effect u want to apply thru this");

                    b.Property<string>("FormTitleHdFormId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("FormTitleHdLanguage")
                        .HasColumnType("int");

                    b.Property<int>("FormTitleHdTenentId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rl")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("RL")
                        .HasComment(" RL=Right to left or LR=Left to Right");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("English or Arabic Text");

                    b.HasKey("TenentId", "FormTitleHdId", "Language", "LabelId")
                        .HasName("PK_FormTitleDT_1");

                    b.HasIndex("FormTitleHdTenentId", "FormTitleHdFormId", "FormTitleHdLanguage");

                    b.ToTable("FormTitleDT");
                });

            modelBuilder.Entity("API.Models.FormTitleHd", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<string>("FormId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("FormID")
                        .HasComment("Make sure you are not using any special character here");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasComment("1= English 2=Arabic you can take from reftable refsubtype='Language'");

                    b.Property<string>("FormName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeaderName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Navigation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SubHeader")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TenentId", "FormId", "Language");

                    b.ToTable("FormTitleHD");
                });

            modelBuilder.Entity("API.Models.Iccatsubcat", b =>
                {
                    b.Property<int>("Companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMPANYID")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Company ID");

                    b.Property<int>("Mycatsubid")
                        .HasColumnType("int")
                        .HasColumnName("MYCATSUBID");

                    b.Property<int?>("Catid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CATID")
                        .HasDefaultValueSql("((9999))");

                    b.Property<string>("Cattype")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CATTYPE")
                        .HasDefaultValueSql("('NONE')");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Itemid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ITEMID");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("REMARKS");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int?>("Subcatid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SUBCATID")
                        .HasDefaultValueSql("((9999))");

                    b.Property<string>("Subcattype")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("SUBCATTYPE")
                        .HasDefaultValueSql("('ZZZ')");

                    b.HasKey("Companyid", "Mycatsubid");

                    b.ToTable("ICCATSUBCAT");
                });

            modelBuilder.Entity("API.Models.LettersHd", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("Mytransid")
                        .HasColumnType("bigint")
                        .HasColumnName("MYTRANSID");

                    b.Property<int>("LetterType")
                        .HasColumnType("int")
                        .HasComment("from RefTable RefSubType='LetterType'");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('0')");

                    b.Property<int?>("Dmsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DMSID")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeID")
                        .HasComment("Received or Sent / Sign by ");

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE");

                    b.Property<DateTime?>("Entrytime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME");

                    b.Property<int?>("FilledAt")
                        .HasColumnType("int")
                        .HasComment("Where this Letter is Filled at the Folder it is coming from RefTable RefSubType='FilingPlace'");

                    b.Property<DateTime?>("LetterDated")
                        .HasColumnType("date");

                    b.Property<int?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("locationID")
                        .HasDefaultValueSql("((0))")
                        .HasComment("from DMS generated ID to fetch that Letter from there");

                    b.Property<DateTime?>("ReceivedSentDate")
                        .HasColumnType("date")
                        .HasColumnName("Received_SentDate")
                        .HasComment("If there is Master Service id than unique of the ServiceSetup.ServiceID except this raw ServiceID will be in the drop Down\r\nIf this service ID Does not have any master or consecutive than it will be same as ServiceID");

                    b.Property<string>("Representative")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SearchTag")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasDefaultValueSql("('0')")
                        .HasComment("SearchTagwill be stored here with Comma Seperated coming from RefTable RefSubType='FilingTag'");

                    b.Property<int?>("SenderReceiverParty")
                        .HasColumnType("int")
                        .HasComment("Where this Letter is Filled at the Folder it is coming from RefTable RefSubType='Party'");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("Updttime")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME");

                    b.Property<string>("Userid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("USERID");

                    b.HasKey("TenentId", "Mytransid", "LetterType")
                        .IsClustered(false);

                    b.ToTable("LettersHD");
                });

            modelBuilder.Entity("API.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LocationName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LocationNameArabic")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("LocationName_Arabic");

                    b.Property<int?>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("API.Models.Mapping", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<int>("MappingId")
                        .HasColumnType("int")
                        .HasColumnName("MappingID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<string>("ArabicDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("OtherDescription")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("TenentId", "LocationId", "MappingId");

                    b.ToTable("Mapping", "Accounts");
                });

            modelBuilder.Entity("API.Models.MappingHead", b =>
                {
                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("MappingId")
                        .HasColumnType("int")
                        .HasColumnName("MappingID");

                    b.ToTable("MappingHeads", "Accounts");
                });

            modelBuilder.Entity("API.Models.Mycompanysetup", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Actdatabasename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ACTDATABASENAME");

                    b.Property<bool?>("Activetenent")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVETENENT");

                    b.Property<string>("Addr1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ADDR1");

                    b.Property<string>("Addr2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ADDR2");

                    b.Property<int?>("Approved")
                        .HasColumnType("int");

                    b.Property<string>("Arabic")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ARABIC")
                        .HasDefaultValueSql("('2')")
                        .IsFixedLength(true);

                    b.Property<string>("Backupdirectory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("BACKUPDIRECTORY");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CITY");

                    b.Property<int?>("Companyid")
                        .HasColumnType("int")
                        .HasColumnName("COMPANYID");

                    b.Property<int?>("Companytype")
                        .HasColumnType("int");

                    b.Property<string>("Compname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMPNAME");

                    b.Property<string>("Compname1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPNAME1");

                    b.Property<string>("Compname2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPNAME2");

                    b.Property<string>("Compname3")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COMPNAME3");

                    b.Property<string>("Compnamech")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMPNAMECH");

                    b.Property<string>("Compnameo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMPNAMEO");

                    b.Property<int>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Datadirectory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DATADIRECTORY");

                    b.Property<decimal>("Decimalcurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(9,3)")
                        .HasColumnName("DECIMALCURRENCY")
                        .HasDefaultValueSql("((3))");

                    b.Property<DateTime>("Entrydate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE");

                    b.Property<DateTime>("Entrytime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME");

                    b.Property<string>("Executabledirectory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EXECUTABLEDIRECTORY");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("FAX");

                    b.Property<string>("Invdatabasename")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("INVDATABASENAME");

                    b.Property<string>("Language1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Language2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Language3")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Logo3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogotoDisplay")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogotoPrint")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Msrp")
                        .HasColumnType("numeric(3,0)")
                        .HasColumnName("msrp");

                    b.Property<string>("PeriodEndDate")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PeriodId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PeriodID");

                    b.Property<string>("PeriodStartDate")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)")
                        .HasColumnName("PHONE");

                    b.Property<string>("Physicallocid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PHYSICALLOCID")
                        .HasDefaultValueSql("('HLY')");

                    b.Property<string>("Postalcode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("POSTALCODE");

                    b.Property<int?>("RecRunningSrl")
                        .HasColumnType("int")
                        .HasColumnName("REC_RUNNING_SRL");

                    b.Property<string>("Reportdefault")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REPORTDEFAULT")
                        .HasDefaultValueSql("('0')")
                        .IsFixedLength(true);

                    b.Property<string>("Reportdirectory")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("REPORTDIRECTORY");

                    b.Property<decimal?>("SalePrice1")
                        .HasColumnType("numeric(3,0)");

                    b.Property<decimal?>("SalePrice2")
                        .HasColumnType("numeric(3,0)");

                    b.Property<decimal?>("SalePrice3")
                        .HasColumnType("numeric(3,0)");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("STATE");

                    b.Property<bool?>("StockTaking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Sysname")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("sysname");

                    b.Property<int?>("TenantGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenantGroupID")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("Tenentdate")
                        .HasColumnType("date")
                        .HasColumnName("TENENTDATE");

                    b.Property<DateTime>("Updttime")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME");

                    b.Property<string>("Userid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("USERID");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ZIPCODE");

                    b.HasKey("TenentId")
                        .IsClustered(false);

                    b.ToTable("MYCOMPANYSETUP");
                });

            modelBuilder.Entity("API.Models.RefLabelMst", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("RefLabelId")
                        .HasColumnType("int")
                        .HasColumnName("RefLabelID");

                    b.Property<string>("RefType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RefSubType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("La1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA1");

                    b.Property<string>("La10")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA10");

                    b.Property<string>("La2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA2");

                    b.Property<string>("La3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA3");

                    b.Property<string>("La4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA4");

                    b.Property<string>("La5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA5");

                    b.Property<string>("La6")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA6");

                    b.Property<string>("La7")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA7");

                    b.Property<string>("La8")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA8");

                    b.Property<string>("La9")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LA9");

                    b.Property<string>("Le1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE1");

                    b.Property<string>("Le10")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE10");

                    b.Property<string>("Le2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE2");

                    b.Property<string>("Le3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE3");

                    b.Property<string>("Le4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE4");

                    b.Property<string>("Le5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE5");

                    b.Property<string>("Le6")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE6");

                    b.Property<string>("Le7")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE7");

                    b.Property<string>("Le8")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE8");

                    b.Property<string>("Le9")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LE9");

                    b.Property<string>("Lf1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF1");

                    b.Property<string>("Lf10")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF10");

                    b.Property<string>("Lf2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF2");

                    b.Property<string>("Lf3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF3");

                    b.Property<string>("Lf4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF4");

                    b.Property<string>("Lf5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF5");

                    b.Property<string>("Lf6")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF6");

                    b.Property<string>("Lf7")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF7");

                    b.Property<string>("Lf8")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF8");

                    b.Property<string>("Lf9")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LF9");

                    b.HasKey("TenentId", "RefLabelId", "RefType", "RefSubType");

                    b.ToTable("RefLabelMST");
                });

            modelBuilder.Entity("API.Models.RefTableAdmin", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("RefAdminId")
                        .HasColumnType("int");

                    b.Property<string>("RefType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RefSubType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Admin")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Descrip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("EndSerial")
                        .HasColumnType("int");

                    b.Property<string>("Infrastructure")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("MySysName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("NormalUser")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("StartSerial")
                        .HasColumnType("int");

                    b.Property<string>("Switch1")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("switch1");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "RefAdminId", "RefType", "RefSubType");

                    b.ToTable("RefTableAdmin");
                });

            modelBuilder.Entity("API.Models.Reftable", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Refid")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("REFID");

                    b.Property<string>("Reftype")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("REFTYPE")
                        .HasDefaultValueSql("('OTH')");

                    b.Property<string>("Refsubtype")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("REFSUBTYPE")
                        .HasDefaultValueSql("('OTH')");

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACTIVE")
                        .HasDefaultValueSql("('Y')");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Infrastructure")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("RefImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("REF_Image");

                    b.Property<string>("Refname1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("REFNAME1");

                    b.Property<string>("Refname2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("REFNAME2");

                    b.Property<string>("Refname3")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("REFNAME3");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Shortname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SHORTNAME");

                    b.Property<string>("Switch1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SWITCH1");

                    b.Property<string>("Switch2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SWITCH2");

                    b.Property<string>("Switch3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SWITCH3");

                    b.Property<int?>("Switch4")
                        .HasColumnType("int")
                        .HasColumnName("SWITCH4");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TenentId", "Refid", "Reftype", "Refsubtype");

                    b.ToTable("REFTABLE");
                });

            modelBuilder.Entity("API.Models.ServiceSetup", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<int?>("AllowSponser")
                        .HasColumnType("int")
                        .HasComment("Allow Sponser for this Services or no");

                    b.Property<string>("AllowedNonEmployes")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Allowed Non Employee in this Service Y/N");

                    b.Property<string>("ConsumerLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE");

                    b.Property<DateTime?>("Entrytime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME");

                    b.Property<string>("FinalApproval")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Here you will place which SerApproval# is the last for example 1,2,3,4,5");

                    b.Property<string>("Frozen")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Allowed to be Frozen");

                    b.Property<string>("HajjAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Keyword")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MasterServiceId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("MasterServiceID")
                        .HasComment("Accept Comma Seperated ID from Drop Down ..\r\nIf there is Master Service id than unique of the ServiceSetup.ServiceID except this raw ServiceID will be in the drop Down\r\nIf this service ID Does not have any master or consecutive than it will be same as ServiceID");

                    b.Property<int?>("MaxInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((8))");

                    b.Property<int?>("MinInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Incase Min is remain 0 than max must be zero too if Min is other than Zero than Max must be equallant or greater than Zero");

                    b.Property<int?>("MinMonthsService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((3))");

                    b.Property<string>("OtherAct1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("PersLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PreviousEmployees")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Allowed by Previous Employees");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("REMARKS");

                    b.Property<string>("SerApproval1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Coming from RefTable RefSubType='Role' and\r\n Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<int>("SerIdbyUser")
                        .HasColumnType("int")
                        .HasColumnName("SerIDByUser");

                    b.Property<string>("ServiceName1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ServiceName2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ServiceSubType")
                        .HasColumnType("int")
                        .HasComment("Coming from RefTable RefType='KUPF' and RefSubtype='ConsumerLoanType' and Switch3=ServiceSetup.ServiceID");

                    b.Property<int?>("ServiceType")
                        .HasColumnType("int")
                        .HasComment("Coming from RefTable RefType='KUPF' and RefSubtype='ServiceType'");

                    b.Property<short?>("SortBy")
                        .HasColumnType("smallint");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updttime")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Userid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USERID");

                    b.HasKey("TenentId", "ServiceId")
                        .HasName("PK_Service");

                    b.ToTable("ServiceSetup");
                });

            modelBuilder.Entity("API.Models.SubHead", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("SubHeadId")
                        .HasColumnType("int")
                        .HasColumnName("SubHeadID");

                    b.Property<string>("ArabicSubHeadName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("BalanceAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CrFlag")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<int>("HeadId")
                        .HasColumnType("int")
                        .HasColumnName("Head_ID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SubHeadCode")
                        .HasColumnType("int");

                    b.Property<string>("SubHeadName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "SubHeadId");

                    b.ToTable("SubHead", "Accounts");
                });

            modelBuilder.Entity("API.Models.SubSubHead", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("SubSubHeadId")
                        .HasColumnType("int")
                        .HasColumnName("SubSubHeadID");

                    b.Property<string>("ArabicSubSubHeadName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("BalanceAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Crupid")
                        .HasColumnType("int")
                        .HasColumnName("crupid");

                    b.Property<int?>("HeadId")
                        .HasColumnType("int")
                        .HasColumnName("Head_ID");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("SubHeadId")
                        .HasColumnType("int")
                        .HasColumnName("SubHead_ID");

                    b.Property<int?>("SubSubHeadCode")
                        .HasColumnType("int");

                    b.Property<string>("SubSubHeadName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TenentId", "LocationId", "SubSubHeadId")
                        .HasName("PK__SubSubHe__5298A9220DD76A00");

                    b.ToTable("SubSubHead", "Accounts");
                });

            modelBuilder.Entity("API.Models.TblAccountMst", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AnnualRevenue")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Annual_Revenue");

                    b.Property<string>("AssignedToName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Assigned_to_Name");

                    b.Property<string>("BillingAddressCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Billing_Address_City");

                    b.Property<string>("BillingAddressCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Billing_Address_Country");

                    b.Property<string>("BillingAddressPostalcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Billing_Address_Postalcode");

                    b.Property<string>("BillingAddressState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Billing_Address_State");

                    b.Property<string>("BillingAddressStreet")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Billing_Address_Street");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<DateTime?>("DateEntered")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Employee")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int")
                        .HasColumnName("IndustryID");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ownership")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneAlternate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Alternate");

                    b.Property<string>("PhoneFax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Fax");

                    b.Property<string>("PhoneOffice")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Phone_Office");

                    b.Property<string>("Rating")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ShippingAddressCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Shipping_Address_City");

                    b.Property<string>("ShippingAddressCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Shipping_Address_Country");

                    b.Property<string>("ShippingAddressPostalcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Shipping_Address_Postalcode");

                    b.Property<string>("ShippingAddressState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Shipping_Address_State");

                    b.Property<string>("ShippingAddressStreet")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Shipping_Address_Street");

                    b.Property<string>("SicCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TeamName")
                        .HasColumnType("int");

                    b.Property<string>("TickerSymbol")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TenentId", "Id")
                        .HasName("PK_CRM_tbl_Account_Mst");

                    b.ToTable("tbl_Account_Mst");
                });

            modelBuilder.Entity("API.Models.TblActSlsetup", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<int>("Transid")
                        .HasColumnType("int")
                        .HasColumnName("transid");

                    b.Property<int>("Transsubid")
                        .HasColumnType("int")
                        .HasColumnName("transsubid");

                    b.Property<int?>("AcceptWarantee")
                        .HasColumnType("int");

                    b.Property<bool?>("AllowMinusQty")
                        .HasColumnType("bit");

                    b.Property<string>("BottomTagLine")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CompniId")
                        .HasColumnType("int")
                        .HasColumnName("CompniID");

                    b.Property<int?>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<int?>("CurrentPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryLocation")
                        .HasColumnType("int");

                    b.Property<bool?>("DescWithColor")
                        .HasColumnType("bit");

                    b.Property<bool?>("DescWithSerial")
                        .HasColumnType("bit");

                    b.Property<bool?>("DescWithWarantee")
                        .HasColumnType("bit");

                    b.Property<string>("HeaderLine")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("IntroLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastClosePeriod")
                        .HasColumnType("int");

                    b.Property<int?>("Module")
                        .HasColumnType("int")
                        .HasColumnName("module");

                    b.Property<int?>("PaymentDays")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReminderDays")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAdminId")
                        .HasColumnType("int")
                        .HasColumnName("SalesAdminID");

                    b.Property<string>("TagLine")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Tcquotation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TCQuotation");

                    b.HasKey("TenentId", "LocationId", "Transid", "Transsubid");

                    b.ToTable("tblActSLSetup");
                });

            modelBuilder.Entity("API.Models.TblAudit", b =>
                {
                    b.Property<long>("TenantId")
                        .HasColumnType("bigint")
                        .HasColumnName("TENANT_ID");

                    b.Property<long>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<int>("MySerial")
                        .HasColumnType("int");

                    b.Property<int>("AuditNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuditType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUserName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("FieldName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateUserName")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("TenantId", "CrupId", "MySerial", "AuditNo")
                        .HasName("PK_Audit");

                    b.ToTable("tblAudit");
                });

            modelBuilder.Entity("API.Models.TblCityStatesCounty", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("TenantID");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<int>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<string>("Active1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACTIVE1")
                        .IsFixedLength(true);

                    b.Property<string>("Active2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACTIVE2")
                        .IsFixedLength(true);

                    b.Property<string>("AssignedRoute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CityArabic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CityEnglish")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CityOther")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LandLine")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Shortcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SHORTCODE");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZONE");

                    b.HasKey("TenantId", "CityId", "StateId", "Countryid")
                        .HasName("PK_tblCityStatesCounty1");

                    b.ToTable("tblCityStatesCounty");
                });

            modelBuilder.Entity("API.Models.TblCountry", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CAPITAL");

                    b.Property<string>("Couname1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COUNAME1");

                    b.Property<string>("Couname2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COUNAME2");

                    b.Property<string>("Couname3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COUNAME3");

                    b.Property<string>("CountryTsubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CountryTSubType");

                    b.Property<string>("CountryType")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Currencyname1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CURRENCYNAME1");

                    b.Property<string>("Currencyname2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CURRENCYNAME2");

                    b.Property<string>("Currencyname3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CURRENCYNAME3");

                    b.Property<string>("Currencyshortname1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CURRENCYSHORTNAME1");

                    b.Property<string>("Currencyshortname2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CURRENCYSHORTNAME2");

                    b.Property<string>("Currencyshortname3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CURRENCYSHORTNAME3");

                    b.Property<decimal>("Currentconvrate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(8,5)")
                        .HasColumnName("CURRENTCONVRATE")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("FaxLength")
                        .HasColumnType("int");

                    b.Property<string>("IanacountryCodeTld")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IANACountryCodeTLD");

                    b.Property<string>("Iso316612letterCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ISO3166_1_2LetterCode");

                    b.Property<string>("Iso316613letterCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ISO3166_1_3LetterCode");

                    b.Property<string>("Iso31661number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ISO3166_1Number");

                    b.Property<string>("Iso4217curCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ISO4217CurCode");

                    b.Property<string>("Iso4217curName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ISO4217CurName");

                    b.Property<string>("ItuttelephoneCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ITUTTelephoneCode");

                    b.Property<string>("Nationality1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NATIONALITY1");

                    b.Property<string>("Nationality2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NATIONALITY2");

                    b.Property<string>("Nationality3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NATIONALITY3");

                    b.Property<string>("Region1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("REGION1");

                    b.Property<string>("Sovereignty")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasColumnType("text");

                    b.Property<int?>("TelLength")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasColumnType("text");

                    b.Property<string>("Zone1")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone1")
                        .IsFixedLength(true);

                    b.Property<string>("Zone2")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone2")
                        .IsFixedLength(true);

                    b.Property<string>("Zone3")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone3")
                        .IsFixedLength(true);

                    b.Property<string>("Zone4")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone4")
                        .IsFixedLength(true);

                    b.Property<string>("Zone5")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone5")
                        .IsFixedLength(true);

                    b.Property<string>("Zone6")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone6")
                        .IsFixedLength(true);

                    b.Property<string>("Zone7")
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .HasColumnName("zone7")
                        .IsFixedLength(true);

                    b.HasKey("TenentId", "Countryid")
                        .HasName("PK_tblCOUNTRY_1");

                    b.ToTable("tblCOUNTRY");
                });

            modelBuilder.Entity("API.Models.TblDistrictStatesCounty", b =>
                {
                    b.Property<int>("TenantId")
                        .HasColumnType("int")
                        .HasColumnName("TenantID");

                    b.Property<int>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<string>("Active1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACTIVE1")
                        .IsFixedLength(true);

                    b.Property<string>("Active2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACTIVE2")
                        .IsFixedLength(true);

                    b.Property<string>("AssignedRoute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("DistrictArabic")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DistrictEnglish")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DistrictOther")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LandLine")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("Shortcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SHORTCODE");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Zone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZONE");

                    b.HasKey("TenantId", "Countryid", "StateId", "DistrictId");

                    b.ToTable("tblDistrictStatesCounty");
                });

            modelBuilder.Entity("API.Models.TblImportCoa", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AccountTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ActivityDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ArabicAccountName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArabicHeadName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArabicSubHeadName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("FamilyCode")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeadCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HeadName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("SubHeadCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubHeadName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubSubHeadCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubSubHeadName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubSubHeadNameArabic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TanentId")
                        .HasColumnType("int")
                        .HasColumnName("TanentID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToTable("tblImportCOA");
                });

            modelBuilder.Entity("API.Models.TblImportCoav2", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID")
                        .UseIdentityColumn();

                    b.Property<string>("AccountName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("AccountTypeName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ActivityDateTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ArabicAccountName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArabicHeadName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ArabicSubHeadName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BankAccountNo")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("FamilyCode")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HeadCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("HeadName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("SubHeadCode")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubHeadName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubSubHeadCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubSubHeadName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("SubSubHeadNameArabic")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TanentId")
                        .HasColumnType("int")
                        .HasColumnName("TanentID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.ToTable("tblImportCOAV2");
                });

            modelBuilder.Entity("API.Models.TblImportVoucher", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("date");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Credit")
                        .HasColumnType("float");

                    b.Property<double?>("Debit")
                        .HasColumnType("float");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("SerialNo")
                        .HasColumnType("int");

                    b.Property<int?>("TanentId")
                        .HasColumnType("int")
                        .HasColumnName("TanentID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("VoucherDate")
                        .HasColumnType("date");

                    b.Property<int?>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherType_ID");

                    b.ToTable("tblImportVoucher");
                });

            modelBuilder.Entity("API.Models.TblState", b =>
                {
                    b.Property<int>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.Property<string>("Active1")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACTIVE1")
                        .IsFixedLength(true);

                    b.Property<string>("Active2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ACTIVE2")
                        .IsFixedLength(true);

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Myname1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MYNAME1");

                    b.Property<string>("Myname2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MYNAME2");

                    b.Property<string>("Myname3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MYNAME3");

                    b.Property<string>("Statezipcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STATEZIPCODE");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Countryid", "StateId");

                    b.ToTable("tblStates");
                });

            modelBuilder.Entity("API.Models.Tblcompanysetup", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("Compid")
                        .HasColumnType("int")
                        .HasColumnName("COMPID");

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength(true);

                    b.Property<string>("Addr1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDR1");

                    b.Property<string>("Addr2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDR2");

                    b.Property<string>("Altmobphone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ALTMOBPHONE")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Avtar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Barcode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BARCODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("Busid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BUSID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Busphone1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BUSPHONE1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Busphone2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BUSPHONE2")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Busphone3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BUSPHONE3")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Busphone4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("BUSPHONE4")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Buyer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("BUYER")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CITY")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CivilId")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("CivilID")
                        .IsFixedLength(true);

                    b.Property<string>("CompanyType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("CompanyTypeRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyType_Ref")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Companyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COMPANYID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Compname")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMPNAME")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Compname1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("COMPNAME1");

                    b.Property<string>("Compname2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("COMPNAME2");

                    b.Property<string>("Compname3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("COMPNAME3");

                    b.Property<string>("Compnamech")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("COMPNAMECH")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Compnameo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COMPNAMEO")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID")
                        .HasDefaultValueSql("((126))");

                    b.Property<string>("Cpasswrd")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CPASSWRD")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("CrupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Cuserid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSERID")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Datasource")
                        .HasColumnType("int")
                        .HasColumnName("datasource");

                    b.Property<string>("DefaultAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMAIL1");

                    b.Property<string>("Email2")
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("EMAIL2");

                    b.Property<DateTime?>("Emailsubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("EMAILSUBDATE");

                    b.Property<bool?>("Emaisub")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("EMAISUB")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Entrydate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Entrytime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FAX")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("FAX1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("FAX2")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Images")
                        .HasColumnType("image");

                    b.Property<bool?>("Inhawally")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("INHAWALLY")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Iscorporate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("ISCORPORATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Isministry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("ISMINISTRY")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Issmb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("ISSMB")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Itmanager")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ITMANAGER")
                        .HasComment("Employee ID incase he is an Employee of the Company incase this field is Null than will considered to be a temporary Driver");

                    b.Property<string>("Keyword")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Marketting")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Mobphone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MOBPHONE")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Mycatsubid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MYCATSUBID")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Myconlocid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MYCONLOCID")
                        .HasDefaultValueSql("((0))");

                    b.Property<long?>("Myprodid")
                        .HasColumnType("bigint")
                        .HasColumnName("MYPRODID");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OldCompid")
                        .HasColumnType("int")
                        .HasColumnName("OldCOMPid");

                    b.Property<string>("Paci")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PACI");

                    b.Property<string>("Physicallocid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PHYSICALLOCID");

                    b.Property<string>("Postalcode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("POSTALCODE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Primlanguge")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRIMLANGUGE")
                        .HasDefaultValueSql("('E')")
                        .IsFixedLength(true);

                    b.Property<string>("Productdealin")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("PRODUCTDEALIN")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("ProfitPercDuringSale")
                        .HasColumnType("decimal(8,2)")
                        .HasComment("During Sales the percentage it is 8,2 like 99.99 only");

                    b.Property<int?>("ReferenceNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("Reload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Remarks")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("REMARKS")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Saledeprod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("SALEDEPROD")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Saler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("SALER")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength(true);

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Updttime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USERID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Webpage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("WEBPAGE")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Zipcode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZIPCODE")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("TenentId", "Compid");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "Compname1", "Compname2", "Compname3" }, "IX_TBLCOMPANYSETUPCompName");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "Countryid", "State", "City" }, "IX_TBLCOMPANYSETUPCountStatCity");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "Altmobphone" }, "IX_TBLCOMPANYSETUP_Mob");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "Compname1", "Altmobphone", "Compid" }, "TBLCOMPANYSETUP")
                        .IsUnique()
                        .HasFilter("[MYCONLOCID] IS NOT NULL AND [COMPNAME1] IS NOT NULL AND [ALTMOBPHONE] IS NOT NULL");

                    b.ToTable("TBLCOMPANYSETUP");

                    b
                        .HasComment("Company Data");
                });

            modelBuilder.Entity("API.Models.TblcontactDelAdre", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<decimal>("ContactMyId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ContactMyID");

                    b.Property<int>("DeliveryAdressId")
                        .HasColumnType("int")
                        .HasColumnName("DeliveryAdressID")
                        .HasComment("select * from reftable where tenentID=18 and reftype = 'COURIER' and REFSUBTYPE= 'AdresLocation' order by 5 ");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("Addr1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDR1");

                    b.Property<string>("Addr2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDR2");

                    b.Property<string>("Addr3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDR3");

                    b.Property<string>("Address3")
                        .HasMaxLength(250)
                        .HasColumnType("nchar(250)")
                        .IsFixedLength(true);

                    b.Property<string>("AdressName1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdressShortName1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Block")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Building")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CITY")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("CompId")
                        .HasColumnType("int")
                        .HasColumnName("CompID");

                    b.Property<int?>("CompLoc")
                        .HasColumnType("int");

                    b.Property<decimal?>("ContactId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ContactID");

                    b.Property<int?>("Countryid")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Cuserid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CUSERID");

                    b.Property<bool?>("Defualt")
                        .HasColumnType("bit");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int")
                        .HasColumnName("DistrictID");

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE");

                    b.Property<DateTime?>("Entrytime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME");

                    b.Property<string>("FloorNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ForFlat")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lane")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Latitute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Longitute")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pacinumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PACINumber");

                    b.Property<string>("PostCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("REMARKS");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("STATE");

                    b.Property<string>("Street")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SyncStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("syncStatus");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("Updttime")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TenentId", "ContactMyId", "DeliveryAdressId");

                    b.ToTable("TBLCONTACT_DEL_ADRES");
                });

            modelBuilder.Entity("API.Models.Tblperiod", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("PeriodCode")
                        .HasColumnType("bigint")
                        .HasColumnName("PERIOD_CODE");

                    b.Property<string>("Mysysname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MYSYSNAME");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("Glpost")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GLPOST")
                        .HasDefaultValueSql("('2')")
                        .IsFixedLength(true);

                    b.Property<string>("Glpostref")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("GLPOSTREF");

                    b.Property<string>("Icpost")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ICPOST")
                        .HasDefaultValueSql("('2')")
                        .IsFixedLength(true);

                    b.Property<string>("Icpostref")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ICPOSTREF");

                    b.Property<DateTime>("PrdEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PRD_END_DATE");

                    b.Property<string>("PrdMonth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PRD_MONTH");

                    b.Property<string>("PrdPeriod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PRD_PERIOD");

                    b.Property<string>("PrdPeriod1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PRD_PERIOD1");

                    b.Property<string>("PrdPeriod2")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PRD_PERIOD2");

                    b.Property<string>("PrdPeriod3")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PRD_PERIOD3");

                    b.Property<DateTime>("PrdStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PRD_START_DATE");

                    b.Property<short>("PrdYear")
                        .HasColumnType("smallint")
                        .HasColumnName("PRD_YEAR");

                    b.Property<string>("Status1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("STATUS1")
                        .HasDefaultValueSql("('2')")
                        .IsFixedLength(true);

                    b.HasKey("TenentId", "PeriodCode", "Mysysname")
                        .IsClustered(false);

                    b.ToTable("TBLPERIODS");
                });

            modelBuilder.Entity("API.Models.Tbltranssubtype", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Transsubid")
                        .HasColumnType("int")
                        .HasColumnName("transsubid");

                    b.Property<int>("Transid")
                        .HasColumnType("int")
                        .HasColumnName("transid");

                    b.Property<string>("Mysysname")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("MYSYSNAME");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('1')")
                        .IsFixedLength(true);

                    b.Property<string>("CashBeh")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("OnHandBeh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('0')")
                        .IsFixedLength(true);

                    b.Property<string>("OpQtyBeh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('0')")
                        .IsFixedLength(true);

                    b.Property<string>("QtyAtDestination")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("QtyAtSource")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("QtyConsumedBeh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('0')")
                        .IsFixedLength(true);

                    b.Property<string>("QtyOutBeh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('0')")
                        .IsFixedLength(true);

                    b.Property<string>("QtyReceivedBeh")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("QtyReservedBeh")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('0')")
                        .IsFixedLength(true);

                    b.Property<string>("Serialno")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serialno");

                    b.Property<string>("Transsubtype")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transsubtype");

                    b.Property<string>("Transsubtype1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transsubtype1");

                    b.Property<string>("Transsubtype2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transsubtype2");

                    b.Property<string>("Transsubtype3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transsubtype3");

                    b.Property<string>("Years")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("years");

                    b.HasKey("TenentId", "Transsubid", "Transid", "Mysysname")
                        .HasName("PK_TBLTRANSSUBTYPE");

                    b.ToTable("tbltranssubtype");
                });

            modelBuilder.Entity("API.Models.Tbltranstype", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Transid")
                        .HasColumnType("int")
                        .HasColumnName("transid");

                    b.Property<string>("Mysysname")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("MYSYSNAME")
                        .HasDefaultValueSql("('IC')");

                    b.Property<string>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("('1')")
                        .IsFixedLength(true);

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("InoutSwitch")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("inoutSwitch")
                        .HasDefaultValueSql("('I')")
                        .IsFixedLength(true)
                        .HasComment("I=In O=Out C=Consume (case Sensitive)");

                    b.Property<string>("Serialno")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serialno")
                        .HasDefaultValueSql("((1001))")
                        .HasComment("The Serial number running for this type of the Transaction is stored here in the terms of the main transaction type. This number can be reset by every year as year is mentioned below so when-ever u make transaction id printed use year as preprinted two digita");

                    b.Property<string>("Switch1")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("switch1")
                        .IsFixedLength(true);

                    b.Property<string>("Transtype")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transtype");

                    b.Property<string>("Transtype1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transtype1");

                    b.Property<string>("Transtype2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transtype2");

                    b.Property<string>("Transtype3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transtype3");

                    b.Property<string>("Years")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("years")
                        .HasDefaultValueSql("((2014))")
                        .HasComment("Year of the transaction");

                    b.HasKey("TenentId", "Transid", "Mysysname")
                        .HasName("PK_TBLTRANSTYPE");

                    b.ToTable("tbltranstype");
                });

            modelBuilder.Entity("API.Models.TestCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestCompanies");
                });

            modelBuilder.Entity("API.Models.TestEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TestEmployees");
                });

            modelBuilder.Entity("API.Models.TestTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestTable");
                });

            modelBuilder.Entity("API.Models.TotalJv", b =>
                {
                    b.Property<string>("AccountHead")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Account Head");

                    b.Property<double?>("Credit")
                        .HasColumnType("float");

                    b.Property<double?>("Debit")
                        .HasColumnType("float");

                    b.Property<string>("Month")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("SlNo")
                        .HasColumnType("float")
                        .HasColumnName("Sl No");

                    b.Property<string>("SubAccountExpenses")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Sub Account / Expenses");

                    b.Property<double?>("VoucherNo")
                        .HasColumnType("float")
                        .HasColumnName("Voucher No");

                    b.Property<double?>("Year")
                        .HasColumnType("float");

                    b.ToTable("'Total JV$'");
                });

            modelBuilder.Entity("API.Models.TransactionDt", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("Mytransid")
                        .HasColumnType("bigint")
                        .HasColumnName("MYTRANSID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<int>("Myid")
                        .HasColumnType("int")
                        .HasColumnName("MYID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<int?>("Activityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ACTIVITYID")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("AttachId")
                        .HasColumnType("int")
                        .HasColumnName("AttachID")
                        .HasComment("TransactionHDDMS.AttachID");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<int?>("DelFlag")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("DiscountReference")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EffectedAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeID");

                    b.Property<string>("Glpost")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GLPOST")
                        .HasDefaultValueSql("('2')")
                        .IsFixedLength(true);

                    b.Property<string>("Glpost1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GLPOST1")
                        .HasDefaultValueSql("('2')")
                        .IsFixedLength(true);

                    b.Property<string>("Glpostref")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("GLPOSTREF");

                    b.Property<string>("Glpostref1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("GLPOSTREF1")
                        .HasDefaultValueSql("('0')");

                    b.Property<decimal?>("InstallmentAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("InstallmentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OtherReference")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<decimal?>("PendingAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<long?>("PeriodCode")
                        .HasColumnType("bigint")
                        .HasColumnName("PERIOD_CODE")
                        .HasComment("TransactionHDDMS.AttachID");

                    b.Property<decimal?>("ReceivedAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<string>("Switch1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SWITCH1");

                    b.Property<string>("UniversityBatchNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("TenentId", "Mytransid", "LocationId", "Myid")
                        .HasName("PK_ICTR_DT")
                        .IsClustered(false);

                    b.ToTable("TransactionDT");
                });

            modelBuilder.Entity("API.Models.TransactionHd", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("Mytransid")
                        .HasColumnType("bigint")
                        .HasColumnName("MYTRANSID");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Activitycode")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ACTIVITYCODE");

                    b.Property<decimal?>("AmtPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("AttachId")
                        .HasColumnType("int")
                        .HasColumnName("AttachID");

                    b.Property<long?>("BankId")
                        .HasColumnType("bigint")
                        .HasColumnName("BankID");

                    b.Property<decimal?>("ChequeAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("date");

                    b.Property<string>("ChequeNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Companyid")
                        .HasColumnType("int")
                        .HasColumnName("COMPANYID");

                    b.Property<string>("ConsumerLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeID");

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE");

                    b.Property<DateTime?>("Entrytime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME");

                    b.Property<string>("ExtraSwitch1")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("ExtraSwitch2")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Glpostref")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("GLPOSTREF")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("Glpostref1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("GLPOSTREF1")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("HajjAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("locationID")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("MasterServiceId")
                        .HasColumnType("int")
                        .HasColumnName("MasterServiceID")
                        .HasComment("If there is Master Service id than unique of the ServiceSetup.ServiceID except this raw ServiceID will be in the drop Down\r\nIf this service ID Does not have any master or consecutive than it will be same as ServiceID");

                    b.Property<decimal?>("Mydocno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("MYDOCNO")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NOTES")
                        .HasDefaultValueSql("('0')");

                    b.Property<string>("OtherAct1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("OtherAct4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("contributions account - \r\nloan account - \r\ntrust account - \r\nsocial assistance account - \r\nfinancial aid account");

                    b.Property<string>("PersLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Projectno")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PROJECTNO")
                        .HasDefaultValueSql("('0')");

                    b.Property<int?>("RefTransId")
                        .HasColumnType("int")
                        .HasColumnName("RefTransID");

                    b.Property<string>("Reference")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("REFERENCE")
                        .HasDefaultValueSql("('0')");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<decimal?>("ServiceSubType")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("Coming from RefTable RefType='KUPF' and RefSubtype='ConsumerLoanType' and Switch3=ServiceSetup.ServiceID");

                    b.Property<decimal?>("ServiceType")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("Coming from RefTable RefType='KUPF' and RefSubtype='ServiceType'");

                    b.Property<string>("Signatures")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("signatures");

                    b.Property<string>("Source")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasComment("Online / Local");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("Terms")
                        .HasColumnType("int");

                    b.Property<decimal?>("Totamt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("TOTAMT")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("Totinstallments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4,0)")
                        .HasColumnName("TOTInstallments")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TransDocNo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("TransactionHDDMS.AttachID");

                    b.Property<DateTime>("Transdate")
                        .HasColumnType("datetime")
                        .HasColumnName("TRANSDATE");

                    b.Property<DateTime?>("Updttime")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME");

                    b.Property<string>("Userbatchno")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("USERBATCHNO");

                    b.Property<string>("Userid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("USERID");

                    b.HasKey("TenentId", "Mytransid")
                        .IsClustered(false);

                    b.ToTable("TransactionHD");
                });

            modelBuilder.Entity("API.Models.TransactionHddapprovalDetail", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("Mytransid")
                        .HasColumnType("bigint")
                        .HasColumnName("MYTRANSID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationID");

                    b.Property<decimal>("SerApprovalId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("SerApprovalID")
                        .HasComment("REFID Coming from RefTable RefSubType='Role' and\r\n Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("date");

                    b.Property<int?>("AttachId")
                        .HasColumnType("int")
                        .HasColumnName("AttachID");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employeeID")
                        .HasComment("Person who approved this his Id");

                    b.Property<DateTime?>("Entrydate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE");

                    b.Property<DateTime?>("Entrytime")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME");

                    b.Property<int?>("MasterServiceId")
                        .HasColumnType("int")
                        .HasColumnName("MasterServiceID")
                        .HasComment("If there is Master Service id than unique of the ServiceSetup.ServiceID except this raw ServiceID will be in the drop Down\r\nIf this service ID Does not have any master or consecutive than it will be same as ServiceID");

                    b.Property<string>("RejectionRemarks")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal?>("RejectionType")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("Coming from RefTable RefType='KUPF' and  RefSubtype='LoanRefusedType'");

                    b.Property<string>("SerApproval")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("RefName1 having Role Coming from RefTable RefSubType='Role' and\r\n Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("Updttime")
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME");

                    b.Property<string>("Userid")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("USERID");

                    b.HasKey("TenentId", "Mytransid", "LocationId", "SerApprovalId")
                        .HasName("PK_TransactionHDDApprovalDetails  _1");

                    b.ToTable("TransactionHDDApprovalDetails  ");
                });

            modelBuilder.Entity("API.Models.TransactionHddm", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<long>("Mytransid")
                        .HasColumnType("bigint")
                        .HasColumnName("MYTRANSID");

                    b.Property<int>("AttachId")
                        .HasColumnType("int")
                        .HasColumnName("AttachID")
                        .HasComment("Continues Serial Number for This TenentID and this TransactionID");

                    b.Property<int>("Serialno")
                        .HasColumnType("int")
                        .HasComment("1,2,3,4 Continues Serial Number for This TenentID, this TransactionID and This AttachmentID ");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Actived")
                        .HasColumnType("bit");

                    b.Property<string>("AttachmentByName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AttachmentPath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("AttachmentsDetail")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("Catid")
                        .HasColumnType("int")
                        .HasColumnName("CATID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DocumentType")
                        .HasColumnType("numeric(18,0)")
                        .HasComment("from  Reftable where refsubtype=’ DocType’");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoutId")
                        .HasColumnType("int")
                        .HasColumnName("RoutID");

                    b.Property<int?>("ShareId")
                        .HasColumnType("int")
                        .HasColumnName("ShareID");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TenentId", "Mytransid", "AttachId", "Serialno");

                    b.ToTable("TransactionHDDMS ");
                });

            modelBuilder.Entity("API.Models.TreeFunction", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((21))");

                    b.Property<string>("DashBoardImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeleteAllow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('N')");

                    b.Property<bool?>("IsGraph")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte>("IsParent")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IsVisibleInMenu")
                        .HasColumnType("bit");

                    b.Property<int?>("MenuOrder")
                        .HasColumnType("int");

                    b.Property<byte?>("MenuType")
                        .HasColumnType("tinyint");

                    b.Property<string>("NodeImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NodeNavUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Other1Allow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("Other2Allow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("Other3Allow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("Other4Allow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("Other5Allow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('N')");

                    b.Property<string>("PagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PageTitle1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PageTitle2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("PrintAllow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('Y')");

                    b.Property<string>("ReadAllow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('Y')");

                    b.Property<string>("WriteAllow")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('Y')");

                    b.HasKey("RoleId", "NodeId", "TenentId");

                    b.ToTable("TreeFunction");
                });

            modelBuilder.Entity("API.Models.TreeNode", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("NodeId")
                        .HasColumnType("int")
                        .HasColumnName("NodeID");

                    b.Property<string>("CommandName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("DashBoardImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DeleteAllow")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'N')")
                        .IsFixedLength(true);

                    b.Property<bool?>("IsGraph")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte>("IsParent")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("IsSubParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsVisibleInMenu")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LocationID")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Branch / Location / Supplier / Customer");

                    b.Property<int?>("MenuOrder")
                        .HasColumnType("int");

                    b.Property<byte?>("MenuType")
                        .HasColumnType("tinyint");

                    b.Property<string>("NodeImageUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NodeNavUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NodeValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Other1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'N')")
                        .IsFixedLength(true);

                    b.Property<string>("Other2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'N')")
                        .IsFixedLength(true);

                    b.Property<string>("Other3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'N')")
                        .IsFixedLength(true);

                    b.Property<string>("Other4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'N')")
                        .IsFixedLength(true);

                    b.Property<string>("Other5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'N')")
                        .IsFixedLength(true);

                    b.Property<string>("PagePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PageTitle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PageTitle1")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PageTitle2")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintAllow")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'Y')")
                        .IsFixedLength(true);

                    b.Property<string>("ReadAllow")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'Y')")
                        .IsFixedLength(true);

                    b.Property<int?>("SortBy")
                        .HasColumnType("int");

                    b.Property<int?>("SubParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubParentID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("WriteAllow")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasDefaultValueSql("(N'Y')")
                        .IsFixedLength(true);

                    b.HasKey("TenentId", "NodeId");

                    b.ToTable("TreeNode");
                });

            modelBuilder.Entity("API.Models.University", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((21))");

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength(true);

                    b.Property<string>("Addr1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADDR1");

                    b.Property<string>("Addr2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ADDR2");

                    b.Property<string>("Altmobphone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ALTMOBPHONE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Busphone1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BUSPHONE1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CITY")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CivilId")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("CivilID")
                        .IsFixedLength(true);

                    b.Property<int?>("Countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("COUNTRYID")
                        .HasDefaultValueSql("((126))");

                    b.Property<long?>("CrupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Email1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMAIL1");

                    b.Property<string>("Email2")
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("EMAIL2");

                    b.Property<DateTime?>("Entrydate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYDATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("Entrytime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRYTIME")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FAX")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("FAX1")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Fax2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("FAX2")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("HajjAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Keyword")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobphone")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MOBPHONE")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Myconlocid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MYCONLOCID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("OtherAct1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherAct2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherAct3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherAct4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OtherAct5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Paciid")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .HasColumnName("PACIID")
                        .IsFixedLength(true);

                    b.Property<string>("PersLoanAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Physicallocid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("PHYSICALLOCID");

                    b.Property<string>("Primlanguge")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRIMLANGUGE")
                        .HasDefaultValueSql("('E')")
                        .IsFixedLength(true);

                    b.Property<string>("Remarks")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("REMARKS")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("SerApproval1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Coming from RefTable RefSubType='Role' and\r\n Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval4")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<string>("SerApproval5")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Which AprovalEmployeeRole will be allowed to be approved else it is to be left NULL");

                    b.Property<int?>("ServiceTypeCustom")
                        .HasColumnType("int")
                        .HasComment("From RefTable REFSubtype='ServiceType'");

                    b.Property<int?>("ServiceTypeInfrastructure")
                        .HasColumnType("int")
                        .HasComment("From RefTable REFSubtype='ServiceType'");

                    b.Property<int?>("ServiceTypeRegular")
                        .HasColumnType("int")
                        .HasComment("From RefTable REFSubtype='ServiceType'");

                    b.Property<int?>("ServiceTypeReimbursement")
                        .HasColumnType("int")
                        .HasComment("From RefTable REFSubtype='ServiceType'");

                    b.Property<int?>("ServiceTypeTermination")
                        .HasColumnType("int")
                        .HasComment("From RefTable REFSubtype='ServiceType'");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STATE")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SynId")
                        .HasColumnType("int")
                        .HasColumnName("SynID");

                    b.Property<DateTime?>("SyncDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UnivIdbyUser")
                        .HasColumnType("int")
                        .HasColumnName("UnivIDByUser");

                    b.Property<string>("UnivName1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnivName2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnivName3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Updttime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("UPDTTIME")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Uploadby")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USERID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Webpage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("WEBPAGE")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("TenentId")
                        .HasName("PK_University_1");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "Countryid", "State", "City" }, "IX_UniversityCountStatCity");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "UnivName1", "UnivName2", "UnivName3" }, "IX_UniversityUnivName");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "Altmobphone" }, "IX_University_Mob");

                    b.HasIndex(new[] { "TenentId", "Myconlocid", "UnivName1", "Altmobphone", "UnivIdbyUser" }, "University")
                        .IsUnique()
                        .HasFilter("[MYCONLOCID] IS NOT NULL AND [UnivName1] IS NOT NULL AND [ALTMOBPHONE] IS NOT NULL");

                    b.ToTable("University");

                    b
                        .HasComment("Company Data");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("Location_ID");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("TanentId")
                        .HasColumnType("int")
                        .HasColumnName("Tanent_ID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users", "Membership");
                });

            modelBuilder.Entity("API.Models.UserDtl", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int")
                        .HasColumnName("USER_DETAIL_ID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATION_ID");

                    b.Property<string>("Address1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ADDRESS1");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ADDRESS2");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CITY");

                    b.Property<int?>("Country")
                        .HasColumnType("int")
                        .HasColumnName("COUNTRY");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<long>("CrupId")
                        .HasColumnType("bigint")
                        .HasColumnName("CRUP_ID");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("EMAIL_ADDRESS");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FAX_NO");

                    b.Property<string>("FromRegDt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FROM_REG_DT");

                    b.Property<string>("HouseNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HOUSE_NO");

                    b.Property<decimal?>("MobileNum")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("MOBILE_NUM");

                    b.Property<string>("PanNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PAN_NO");

                    b.Property<string>("PhNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PH_NO");

                    b.Property<string>("PincodeNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PINCODE_NO");

                    b.Property<string>("PostOffice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("POST_OFFICE");

                    b.Property<string>("SecAns")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SEC_ANS");

                    b.Property<string>("SecQues")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("SEC_QUES");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STATE");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("STREET");

                    b.Property<string>("Tehsil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TEHSIL");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TITLE");

                    b.Property<string>("VillageTownCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VILLAGE_TOWN_CITY");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ZIP");

                    b.HasKey("TenentId", "UserDetailId", "LocationId")
                        .HasName("PK_ACM_USER_DTL_1");

                    b.ToTable("USER_DTL");
                });

            modelBuilder.Entity("API.Models.UserMst", b =>
                {
                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LOCATION_ID");

                    b.Property<string>("AccLock")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACC_LOCK");

                    b.Property<string>("ActiveFlag")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACTIVE_FLAG");

                    b.Property<bool?>("Activeuser")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVEUSER");

                    b.Property<DateTime?>("ApprovalDt")
                        .HasColumnType("datetime")
                        .HasColumnName("APPROVAL_DT");

                    b.Property<string>("Avtar")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool?>("CheckinSwitch")
                        .HasColumnType("bit");

                    b.Property<int?>("CompId")
                        .HasColumnType("int");

                    b.Property<int>("CrupId")
                        .HasColumnType("int")
                        .HasColumnName("CRUP_ID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfJoining")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EmpID");

                    b.Property<string>("EmployeePosition")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("FirstName1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FIRST_NAME1");

                    b.Property<string>("FirstName2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FIRST_NAME2");

                    b.Property<string>("FirstTime")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("FIRST_TIME");

                    b.Property<bool?>("IsSignature")
                        .HasColumnType("bit");

                    b.Property<string>("Language1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Language3")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastLoginDt")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_LOGIN_DT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("LastName1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LAST_NAME1");

                    b.Property<string>("LastName2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LAST_NAME2");

                    b.Property<long?>("LoginActive")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LOGIN_ID");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("PasswordChng")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PASSWORD_CHNG");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("REMARKS");

                    b.Property<string>("Salary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("salary");

                    b.Property<string>("SignatureImage")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("ThemeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("THEME_NAME");

                    b.Property<DateTime?>("TillDt")
                        .HasColumnType("datetime")
                        .HasColumnName("Till_DT")
                        .HasComment("Ayo Till date");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int")
                        .HasColumnName("USER_DETAIL_ID");

                    b.Property<int?>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("USER_TYPE");

                    b.Property<DateTime?>("Userdate")
                        .HasColumnType("datetime")
                        .HasColumnName("USERDATE");

                    b.Property<string>("VerificationCd")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("VERIFICATION_CD");

                    b.HasKey("TenentId", "UserId", "LocationId");

                    b.ToTable("USER_MST");
                });

            modelBuilder.Entity("API.Models.UserPage", b =>
                {
                    b.Property<int>("UserWebPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserWebPageID")
                        .UseIdentityColumn();

                    b.Property<bool?>("HasDelete")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasInsert")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasUpdate")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<int?>("WebPageId")
                        .HasColumnType("int")
                        .HasColumnName("WebPage_ID");

                    b.HasKey("UserWebPageId")
                        .HasName("PK__UserPage__D6CACE438595FAC8");

                    b.ToTable("UserPages", "Membership");
                });

            modelBuilder.Entity("API.Models.Voucher", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenter_ID");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<string>("FileContentType")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("FperiodId")
                        .HasColumnType("int")
                        .HasColumnName("FPeriod_ID");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSingleEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Narrations")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OriginalFileName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("date");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherType_ID");

                    b.HasKey("TenentId", "LocationId", "VoucherId");

                    b.ToTable("Voucher", "Accounts");
                });

            modelBuilder.Entity("API.Models.VoucherDetail", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<int>("VoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherDetailID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ClearedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ClearedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenter_ID");

                    b.Property<decimal?>("Cr")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal?>("Dr")
                        .HasColumnType("decimal(18,3)");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("Voucher_ID");

                    b.HasKey("TenentId", "LocationId", "VoucherDetailId");

                    b.ToTable("VoucherDetail", "Accounts");
                });

            modelBuilder.Entity("API.Models.VoucherDetailHistory", b =>
                {
                    b.Property<int>("TenentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenentID")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<long>("VoucherDetailHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("VoucherDetailHistoryID")
                        .UseIdentityColumn();

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("Account_ID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ChequeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("ClearedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ClearedDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenter_ID");

                    b.Property<decimal?>("Cr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("Crupid")
                        .HasColumnType("bigint")
                        .HasColumnName("crupid");

                    b.Property<decimal?>("Dr")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("HistoryDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Particular")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<int?>("VoucherDetailId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherDetail_ID");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("Voucher_ID");

                    b.HasKey("TenentId", "LocationId", "VoucherDetailHistoryId");

                    b.ToTable("VoucherDetail_History", "Accounts");
                });

            modelBuilder.Entity("API.Models.VoucherType", b =>
                {
                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherTypeID");

                    b.Property<string>("ArabicVoucherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePrefix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VoucherTypeId");

                    b.ToTable("VoucherTypes", "Accounts");
                });

            modelBuilder.Entity("API.Models.VwAwstatusCatWise", b =>
                {
                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("ACTIVE");

                    b.Property<string>("Awstatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AWStatus");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Refsubtype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("REFSUBTYPE");

                    b.Property<string>("Reftype")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("REFTYPE");

                    b.Property<string>("Sorting")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TenentId")
                        .HasColumnType("int")
                        .HasColumnName("TenentID");

                    b.ToView("VwAWStatusCatWise");
                });

            modelBuilder.Entity("API.Models.WebPage", b =>
                {
                    b.Property<int>("WebPageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WebPageID")
                        .UseIdentityColumn();

                    b.Property<string>("ArabicPageTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Description")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("PageIcon")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PageOrder")
                        .HasColumnType("int");

                    b.Property<string>("PageTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("Parent_ID");

                    b.Property<string>("ViewName")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)");

                    b.HasKey("WebPageId");

                    b.ToTable("WebPages", "Membership");
                });

            modelBuilder.Entity("API.Models.WebPageUrl", b =>
                {
                    b.Property<int>("WebPageUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WebPageUrlID")
                        .UseIdentityColumn();

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("WebPageId")
                        .HasColumnType("int")
                        .HasColumnName("WebPage_ID");

                    b.HasKey("WebPageUrlId");

                    b.ToTable("WebPageUrls", "Membership");
                });

            modelBuilder.Entity("API.Models.FormTitleDt", b =>
                {
                    b.HasOne("API.Models.FormTitleHd", null)
                        .WithMany("FormTitleDts")
                        .HasForeignKey("FormTitleHdTenentId", "FormTitleHdFormId", "FormTitleHdLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.TestEmployee", b =>
                {
                    b.HasOne("API.Models.TestCompany", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("API.Models.FormTitleHd", b =>
                {
                    b.Navigation("FormTitleDts");
                });

            modelBuilder.Entity("API.Models.TestCompany", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
